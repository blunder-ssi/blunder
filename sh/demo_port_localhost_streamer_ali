#!/usr/bin/env bash

#
# To run this demo:
#
#   1. in one term:     `stack run localhost-router`
#   2. in another term: `sh/demo_port_localhost_streamer_ali <SERVED_DIR>`
#   3. in another term: `sh/demo_port_localhost_streamer_bob`
#
#   It's important to boot ali first, since she runs SERV, and bob runs RQST.
#
#   ---
#
#   <SERVED_DIR> must contain .mp4 videos, encoded with "moov (metadata) before
#   mdat (audio/video data)", also known as "fast start" or "web optimized".
#   This can be accomplished with:
#
#   $ ffmpeg -i input.mp4 -c copy -movflags faststart output.mp4
#
#   More details: https://multimedia.cx/eggs/improving-qt-faststart/
#

# plunder consumes a ton of file descriptors and mmap segments, in the current
# demo design. we must check that we have enough fds for all files, and that we
# have a high enough max_map_count.

# Set a minimum required limit
MIN_LIMIT=55555

# Get the current limit for the number of open files
current_limit=$(ulimit -n)

if [ "$current_limit" -lt "$MIN_LIMIT" ]; then
  echo "Error: The current limit for the number of open files is too low ($current_limit)."
  echo "Please increase the limit to at least $MIN_LIMIT by running the following command:"
  echo "ulimit -n $MIN_LIMIT"
  echo "Note: This change will only apply to the current shell session."
  exit 1
fi

if [ "$#" -ne 1 ]; then
    echo "usage: $0 <SERVED_DIR>"
    exit 1
fi
SERVED_DIR=$1

export MACHINE_DIR=$(realpath .demo_ali)

plunder=$(stack path --local-install-root)/bin/plunder
pc=$(stack path --local-install-root)/bin/pc

rm -Rf "$MACHINE_DIR"
mkdir -p "$MACHINE_DIR"

$plunder boot "$MACHINE_DIR" sire/demo_port_localhost_streamer_ali.sire

$plunder start "$MACHINE_DIR" &
RUN_MACHINE=$!

until find "$MACHINE_DIR" -maxdepth 1 -name "*.http.port" -quit
do
     echo "Waiting..."
     sleep 0.1
done

# Why an additional sleep here? Some weird filesystem sync issue where the
# port file was created, but hasn't been written to yet.
sleep 0.1

PORT=$(cat "$MACHINE_DIR"/*.http.port)

echo "got SERVED_DIR: $SERVED_DIR."
echo "uploading its contents:"

find $SERVED_DIR -type f -iname '*.mp4' -print0 | while read -d $'\0' file
do
  echo $file
  (
  STR="/file/$(basename $file)"
  SIZE=$(echo -n "$STR" | wc -c)
  perl -e "print pack \"Q<*\", $SIZE"
  echo -n "$STR"
  #
  STR="video/mp4"
  SIZE=$(echo -n "$STR" | wc -c)
  perl -e "print pack \"Q<*\", $SIZE"
  echo -n "$STR"
  #
  SIZE=$(wc -c <"$file")
  perl -e "print pack \"Q<*\", $SIZE"
  cat $file
  ) | $pc 111 44432278236719067428893167763207022809724264707211980053420701651917683951304
done

echo "files are uploaded. no browsable interface available."

wait $RUN_MACHINE
