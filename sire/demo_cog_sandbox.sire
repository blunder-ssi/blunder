;;; Copyright 2023 The Plunder Authors
;;; Use of this source code is governed by a BSD-style license that can be
;;; found in the LICENSE file.

### demo_cog_sandbox <- demo_cog_stop

/+  boot
/+  kern
/+  sandbox
/+  stew
/+  demo_timer

; Same as stopDemo from demo_cog_stop.sire, minus testing erroneous %stop calls.
= (miniStopDemo return)
: ??(spin_got_id id) <- syscall (COG_SPIN (runCog-(timeDemo 5)))
| trk [%cogId id]
;
; wait a second for the other cog to do something
: ??(td_got_time now) <- syscall TIME_WHEN
| trk [current_time=now]
: ??(td_waited _) <- syscall (**TIME_WAIT (inc now))
;
; stop and steal that cog's value.
: ??(stop_get_val val) <- syscall (COG_STOP id)
| if | isNone val
  | 'COG_STOP did not return the val for cog: ' val
| trk [%stopVal (fromSome 0 val)]
| return ()

@ allowCogAndWhen [[%cog] [%time 0 %when] [%time 0 %wait]]
| runCog | withCogSandbox allowCogAndWhen miniStopDemo

;
; TODO:
;
; - [x] If we're wrapping [%cog %spin], we should also be unwrapping the value
;       returned in [%cog %reap] and [%cog %spin].
;
; - [ ] How do you control the sandbox for new cogs spun? You don't really want
;       to always inherit the parent's sandbox. It would be better if there were
;       a way to specify a new sandbox or change it, but that's now IPC and the
;       kernel and the program would fight over %recv.
;
