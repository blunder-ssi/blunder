;;; Copyright 2023 The Plunder Authors
;;; Use of this source code is governed by a BSD-style license that can be
;;; found in the LICENSE file.

### datatype <- mutrec

/+  boot
/+  switch  ['#switch' switchE unrollSlip2Tar]

''' {#datatype} and {#datacase} work by setting some properties on the
''' binders for each constructor:  uses the properties conTag, conAri,
''' conFun, and conHas:
'''
''' -   conTag: The numerical tag for this branch.
''' -   conFun: The function used to get the tag from a instance.
''' -   conAri: The number of values on this branch.
''' -   conHas: Does this have a tag?  Should we offset our values
'''             indecies by one when getting fields?
'''
''' This design is at "get something running" levels of polish, and
''' will eventually need to be completely ripped apart, redesigned,
''' and rebuilt.
'''
''' Furthermore, the code generated by {#datacase} is currently
''' quite inferior to the code generated the utility functions
''' `maybeCase`, `listCase`, etc.  #datacase  currently outputs a
''' switch call in all cases.  Still unclear how best to resolve this
''' issues.


""" Getting that tag from an object """"""""""""""""""""""""""""""""""""""""""""

;;; TODO: Jet this and OP1 this.
(_DataTag x)=(if x x (idx 0 x))

dataTag=_DataTag

(0     !!= dataTag 0)
(1     !!= dataTag 1)
(2     !!= dataTag 2)
('foo' !!= dataTag 'foo')
('bar' !!= dataTag ['bar' 9])
(0     !!= dataTag [0 1 2 3])


""" Opening Records """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= (constrToCamel prefix constr)
| strWeld prefix
| strFromList
| ? (fixUnderscores str)
  : c cs <- listCase str str
  : d ds <- listCase cs  str
  | if (eql c '_')
      | fixUnderscores (CONS toUpper-d ds)
  | CONS c (fixUnderscores cs)
| CONS '_'
| strToList
| strToLower constr

!!= 'openPair'     | constrToCamel %open 'PAIR'
!!= 'mkTreeConfig' | constrToCamel %mk 'TREE_CONFIG'

= (defC sig bodyExp)
| OPEN 0 "=" (sigE sig, bodyExp) 0

= (defKC key sig bodyExp)
| OPEN 0 "=" (sigKE key sig, bodyExp) 0

> (Nat, Str) > Cmd
= (mkGetterC pair)
@ ix,field | pair
@ nam      | strWeld "get" (strCapitalize field)
| defC (nam, "x")
| appE (cnsE (idx ix), varE "x")

> (Nat, Str) > Cmd
= (mkSetterC pair)
@ ix,field | pair
@ nam      | strWeld "set" (strCapitalize field)
| defC [nam 'x' 'record']
| appE (cnsE (mut ix), varE 'x', varE 'record')

> (Str, Row Str) > Cmd
= (mkNamedC constr fields)
@ nam
        | strWeld "mk"
        | strCapitalize
        | strToLower constr
| defC [nam %t]
| appE
| rowCons (varE constr)
| turn fields (f & appE (cnsE (tabIdx f), varE "t"))

= (mkConstrC constr fields)
| defC (rowCons constr fields)
| rowE (map varE fields)

= (mkOpenerC constr fields)
@ nam
    (constrToCamel "#open" constr)
``
    = ($$(txtE nam) s p e a r err ok)
        : _ expr body
               <- $rexParseKids r $[readAny readAny readAny] err
        | ok p ($inc a)
        | $destructureRowE ($gensym a) $$(rowE | map txtE fields) expr body

!!= (mkOpenerC %pair [%fst %snd])
       ``
        = ('#openPair' s p e a r err ok)
            : _ expr body
               <- $rexParseKids r $[readAny readAny readAny] err
            | ok p ($inc a)
            | $destructureRowE ($gensym a) (#| $(cow 2) 'snd' 'fst') expr body

"""
""" This example:
"""
"""     record#(Pair a b)#(PAIR fst:a snd:b)
"""
""" Expands to:
"""
"""     = (PAIR fst snd) | [fst snd]
"""     = (getFst x)     | idx 0 x
"""     = (getSnd x)     | idx 1 x
"""     = (setFst v x)   | mut 0 v x
"""     = (setSnd v x)   | mut 1 v x
"""     = (mkPair t)     | PAIR (look %fst t) (look %snd t)
"""
""" This input format works too:
"""
"""     # record (Pair a b)
"""     | PAIR fst:a snd:b
"""
""" And also this:
"""
"""     # record (Pair a b)
"""     | PAIR
"""     * fst : a
"""     * snd : b

= sigExpect | "Expected `x` or signature `(x y z)`"

; = (readConstructorSig rex err ok)
; ^ traverseRow _ (rexSons rex) ok
; ? (step son ret)
; | readSymbol son err
; & sym
; | ret (rexIdnt son, sym)

fieldExpect="Expected something like (field:type)"

= (parseField rex err ret)
@ sKids (rexKids rex)
@ sRune (rexRune rex)
| ifNot (":" == sRune)   | err rex fieldExpect
| ifNot (2 == len-sKids) | err rex fieldExpect
: sym <- readSymbol (idx 0 sKids) err
@ typ (idx 1 sKids)
; Ignoring the type for now.
| ret (rexIdnt rex, sym, typ)

= (parseManyFields rexes err ret)
^ traverseRow _ rexes ret
& (rex ret)
| parseField rex err ret

  = fieldItemExpect
""" * field : type
""" * field : type

= (parseItemizedFields rex err ret)
^ _ NIL rex
? (go acc rex)
| if (isZero rex)
    | ret (listToRowReversed acc)
| ifNot (rexRune rex == '*')
    | err rex fieldItemExpect
@ sons    (rexSons rex)
@ numSons (len sons)
| if (numSons == 1)
    : field <- parseField (idx 0 sons) err
    | go (field :: acc) (rexHeir rex)
| ifNot (numSons == 2)
    | err rex fieldItemExpect
: sym   < readSymbol (idx 0 sons) err
@ typ   | idx 1 sons
@ field | (rexIdnt rex, sym, typ)
| go (field :: acc) (rexHeir rex)

; CNSTR
; (CNSTR (field:type)*)
; (CNSTR (* field : type)(* field : type)
; (|CNSTR)(* field : type)(* field : type)
= (readConstructorSig r err ok)
| ifNot (rexIsNode r)
    ; trk 'just symbol'
    : cnstr <- readSymbol r err
    | ok rexIdnt-r cnstr []
;
; trk '| node'
@ kids    | rexKids r
@ numKids | len kids
| if (neq "|" rexRune-r)
        | err r sigExpect
| if (isZero numKids)
        | err r "Expected at least one kid"
;
@ cnstrRex (idx 0 kids)
: cnstr   < readSymbol cnstrRex err
@ cnstrId | rexIdnt cnstrRex
;
| if (eql 1 numKids)
        ; trk '|-rune but no fields'
        | ok cnstrId cnstr []
;
; trk 'there are fields'
@ fields     | drop 1 kids
; trk [=fields]
@ firstField | idx 0 fields
;
| if (eql 2 numKids && ("*" == rexRune firstField))
    : fields <- parseItemizedFields (idx 1 kids) err
    | ok cnstrId cnstr fields
: fields <- parseManyFields (drop 1 kids) err
| ok cnstrId cnstr fields

= (readDatatypeSig node err ok)
@ rune (rexRune node)
| if (neq "*" rune)
    | err node "Expecting something like (* CNSTR field:type ...)"
;
; Inglorious short-term hack: just re-using the record parser with
; fudged input TODO.
;
^ readConstructorSig _ err ok
| rexSetRune "|" node

= (rexToTrip rex)
@ bad
    | die [%rexToTrip %badArgument rex]
: rune sons heir
   <- **rexGetNode rex bad
| if (neq 0 heir)
    | bad
| rowCons rune sons

; '#record'/Macro
= ('#record' s p e a r err ok)
@ kids    (rexKids r)
@ numKids (len kids)
;
; We ignore the first kid, because it's the type, which we don't yet
; actually do anything with.
;
: key constr fields
       <- **readConstructorSig (idx 2 kids) err
; trk [=key =constr =fields]
| ok p a
| if (isZero len-fields)
        | bloodline
        ; trkVal %bloodline
       ~~ defC [constr] (natE 0)
       ~~ @ nam (| strWeld "mk" | strCapitalize | strToLower constr)
          | defC [nam '_'] (natE 0)
; trkVal %bloodline
@ fields (map (idx 1) fields)  ;;  (Row (RexId, Symbol, Type)) -> Row Symbol
| bloodline
| listCat
~~ ~~ mkConstrC constr fields
~~ ~~ mkOpenerC constr fields
~~ ~~ mkNamedC constr fields
~~ listMap mkGetterC (listIndexed (listFromRow fields))
~~ listMap mkSetterC (listIndexed (listFromRow fields))

record#Unit#UNIT
record#(Box a)#(BOX boxItem:a)

# record (Pair a b)
| PAIR fst:a snd:b

ex=(PAIR %a %b)

!!= (getFst ex)    | %a
!!= (getSnd ex)    | %b
!!= (setFst %x ex) | PAIR %x %b
!!= (setSnd %x ex) | PAIR %a %x
!!= ex             | mkPair [fst="a" snd="b"]
!!= (BOX UNIT)     | BOX (mkUnit %[])
!!= 3              | openBox#(BOX 3)#boxItem
!!= 5              | openPair#(PAIR 2 3)#(add fst snd)


""" Datatypes """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

;;;
;;; # datatype (Either a b)
;;; * LEFT x:a
;;; * RYTE x:b
;;;
;;; # datatype (List a)
;;; * NULL
;;; * CONS x:a xs:(List a)
;;;


''' readDataBranches '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

> Rex > MacroMonad (Row (Symbol, Row Symbol))
= (readDataBranches r err ok)
^ _ NIL r
? (go acc r)
@ = this (rexSetHeir 0 r)
  = that (rexHeir r)
: key ctr slots <- readDatatypeSig this err
@ acc
        | CONS [key ctr slots] acc
| if (isZero that)
        | ok (listToRowReversed acc)
| else
        | go acc that


!!=            ,, [0 %FOO [(0, 'x', `a)]]
               ,, [0 %BAR [(0, 'x', `b) (0, 'y', `c) (0, 'z', `d)]]
               ,, [0 %LOL []]
        ^ readDataBranches _ v2 I
        ` * FOO x:a
          * BAR x:b y:c z:d
          * LOL


''' defDataTypeC '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

> RexSources
> RexProps
> Env
> Row (Key, Str, Row Str)
> (RexProps, Cmd)
= (defDataTypeC src prp env branches)
;
; trkVal %defDataTypeC
;
^ _ 0 prp NIL (listFromRow branches)
? (loop ix prp acc remain)
;
| seq ix
; trk %loop,[=ix =prp =acc =remain]
;
: kca remain <- **listCase remain (prp, bloodline acc)
@ [key cns arg] kca
;
@ prp (setProperty key 'conTag' ix       prp)
@ prp (setProperty key 'conAri' len-arg  prp)
@ prp (setProperty key 'conFun' _DataTag prp)
@ prp (setProperty key 'conHas' TRUE     prp) ; hasTag
;
@ arg (map idx-1 arg)
@ bod (| rowE | rowCons natE-ix | map varE arg)
@ cmd (defKC key (rowCons cns arg) bod)
@ acc (CONS cmd acc)
;
| loop (inc ix) prp acc remain


''' #datatype ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

; '#datatype'/Macro
= ('#datatype' s p e a r err ok)
@ = kids (rexKids r)
| ifNot (len-kids == 3)
        | err r
      """Expected something like
      """
      """    # datatype Type
      """    * CONSTR
      """    * CONSTR field:type ...
: branches < readDataBranches (idx 2 kids) err
@ [prp rex] | defDataTypeC s p e branches
| ok prp a rex


# datatype (Either a b)
* E_LEFT x:a
* E_RIGHT x:b

!!= 0        | getProp#(E_LEFT.conTag)
!!= 1        | getProp#(E_LEFT.conAri)
!!= _DataTag | getProp#(E_LEFT.conFun)
!!= 1        | getProp#(E_RIGHT.conTag)
!!= 1        | getProp#(E_RIGHT.conAri)
!!= _DataTag | getProp#(E_RIGHT.conFun)

!! eql [0 9] | E_LEFT 9
!! eql [1 8] | E_RIGHT 8


"""
""" # datacase foo
""" * NIL         0
""" * (CONS x xs) xs
"""
""" ~~ [0 [] `0)
""" ~~ [1 [%x %xs] `xs]
"""
""" # switch (idx 0 foo)
""" * 0
"""     @ [_] foo
"""     0
""" * 1
"""     @ [_ x xs] foo
"""     1
"""


''' readDatacaseBody '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

> Map Symbol Nat
> Properties
> Rex
> Macro3 (a > Nat) Rex (Row (Nat, Row Symb, Rex))
= (readDatacaseBody src prp cases err ok)
;;;;;
: clauses
    < ^ unrollSlip2Tar cases _ err
      ? (onAlien x err ret)
      | err x 'Not a switch branch'
;;;;;
^ _ FALSE 0 NONE NIL (listFromRow clauses)
? (go hasTag fun oFallback acc remain)
: [sigRex bodyRex] remain
    < **listCase remain
        | ok
        * hasTag
        * fun
        * fromSome (natE 0) oFallback
        * listToRowReversed acc
;;;;;
| if (rexEql `_ sigRex)
    | ifNot (isZero oFallback)
        | err cases "Only one fallback-pattern is allowed"
    | go hasTag fun (SOME bodyRex) acc remain
;;;;;
: constr fields
    < & k
      | if (rexIsLeaf sigRex)
          : sym < readKey sigRex err
          | k sym []
      | else
          | readDestroyer sigRex err k
;
| ifNot (hasKey constr src)
    | err sigRex
    ^ strWeld _ constr
    | "Undefined Pattern: "
;
@ key (look src constr)
| if (isZero key)
    | err sigRex
    ^ strWeld _ constr
    | "Pattern defined without identity: "
;
| ifNot (hasProperty key 'conTag' prp)
    | err sigRex
    ^ strWeld _ constr
    | "Unknown constructor(tag): "
| ifNot (hasProperty key 'conAri' prp)
    | err sigRex
    ^ strWeld _ constr
    | "Unknown constructor(ari): "
;
| ifNot (hasProperty key 'conFun' prp)
    | err sigRex
    ^ strWeld _ constr
    | "Unknown constructor(fun): "
;
| ifNot (hasProperty key 'conHas' prp)
    | err sigRex
    ^ strWeld _ constr
    | "Unknown constructor(has): "
;;;;;
@ tag    | getProperty key 'conTag' prp
@ ari    | getProperty key 'conAri' prp
@ fun    | getProperty key 'conFun' prp
@ hasTag | getProperty key 'conHas' prp
@ acc    | CONS [tag ari fields bodyRex] acc
;;;;;
| if (neq ari len-fields)
    | err sigRex
    ^ strWeld _ (showNat ari)
    | 'This constructor requires arity='
;;;;;
| go hasTag fun oFallback acc remain

!!=    ,, TRUE
       ,, dataTag
       ,, (natE 0)
       ,,  ,, [0 0 []                      `[x "]"]]
           ,, [1 2 [[%v 0 '_'] [%v 0 '_']] `[x " " (go xs)]]
    ^ _ v2 v4
    @ xpr `` * LNULL       [x "]"]
             * (LCONS _ _) [x " " (go xs)]
    @ src %% =LNULL 3
          %% =LCONS 4
    @ prp %% =conTag %[3=0 4=1]
          %% =conAri %[3=0 4=2]
          %% =conFun %[3=_DataTag 4=_DataTag]
          %% =conHas %[3=TRUE 4=TRUE]
    | readDatacaseBody src prp xpr

!!=    ,, TRUE
       ,, dataTag
       ,, `[x " " (go xs)]
       ,,  ,, [0 0 [] `[x "]"]]
    ^ _ v2 v4
    @ xpr `` * LNULL [x "]"]
             * _     [x " " (go xs)]
    @ src %% =LNULL 3
          %% =LCONS 4
    @ prp %% =conTag %[3=0 4=1]
          %% =conAri %[3=0 4=2]
          %% =conFun %[3=_DataTag 4=_DataTag]
          %% =conHas %[3=TRUE 4=TRUE]
    | readDatacaseBody src prp xpr

= xpr `` * _ 0
         * _ 0

!!=    ,, xpr
       ,, "Only one fallback-pattern is allowed"
    | readDatacaseBody %[] %[] xpr v2 v4


''' makeDatacaseExpr '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

= (makeDatacaseExpr hasTag fun aft valExp fallback cases return)
@ !tmpVar (gensym aft)
@ !tmpExp (varE tmpVar)
@ !aft (inc aft)
: aft pairs
    < forRowWithState aft cases
        & (aft [tag ari params body] continue)
        @ rowPat
            | if hasTag
            * (%r, rowCons [%v 0 '_'] params)
            * (%r, params)
        @ binds [(rowPat, valExp)]
        @ [aft bSeq deps] (sequenceBinds aft binds)
        | continue aft (tag, bindSeqE bSeq body deps)
@ tagExp (appE (cnsE fun, tmpExp))
@ result
    | OPEN 0 '@' [tmpExp valExp]
    | switchE tagExp fallback
    | tabFromPairs
    | pairs
| return aft result


''' #datacase ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

= ('#datacase' s p e a r err ok)
;;;
@ nex  | a
@ sons | rexSons r
@ heir | rexHeir r
;;;
| if (neq 2 (len sons))
        | err r '#datacase requires one son plus an heir.'
| if (isZero heir)
        | err r '#datacase requires one son plus an heir.'
;;;
@ [_ valExp] sons
: hasTag fun fb cases < readDatacaseBody s p heir err
: nex exp             < makeDatacaseExpr hasTag fun nex valExp fb cases
| ok p nex exp

# datatype (List a)
* LNULL
* LCONS x:a y:(List a)

= (showList xs)
| strWeld "["
^ _ xs
? (go xs)
# datacase xs
* LNULL
    | "]"
* (LCONS x xs)
    | strCat
    # datacase xs
    * LNULL       [x "]"]
    * (LCONS _ _) [x " " (go xs)]

!!= '[a b c]'
        | showList | LCONS %a | LCONS %b | LCONS %c LNULL

!!= 'hi' # datacase (LCONS 3 4)
         * LNULL 'bye'
         * _     'hi'

!!= 'hi' # datacase (LCONS 3 4)
         * LNULL 'byte'
         * _
         | 'hi'

; TODO
; !!= 'hi' # datacase (LCONS 3 4)
;          * LNULL 'bye'
;          | 'hi'


""" Backfills """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

zero=0
one=1
two=2


''' Bit ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

setProp#(TRUE.conTag)#one
setProp#(TRUE.conAri)#zero
setProp#(TRUE.conFun)#I
setProp#(TRUE.conHas)#FALSE

setProp#(FALSE.conTag)#zero
setProp#(FALSE.conAri)#zero
setProp#(FALSE.conFun)#I
setProp#(FALSE.conHas)#FALSE

!!=     'true'
    # datacase TRUE
    * TRUE  'true'
    * FALSE 'false'


''' Opt ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

setProp#(NONE.conTag)#zero
setProp#(NONE.conAri)#zero
setProp#(NONE.conFun)#len
setProp#(NONE.conHas)#FALSE

setProp#(SOME.conTag)#one
setProp#(SOME.conAri)#one
setProp#(SOME.conFun)#len
setProp#(SOME.conHas)#FALSE

!!=     ['some' %x]
    # datacase (SOME %x)
    * NONE     | 'none'
    * (SOME x) | [{some} x]


''' List '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

setProp#(CONS.conTag)#two
setProp#(CONS.conAri)#two
setProp#(CONS.conFun)#len
setProp#(CONS.conHas)#FALSE

setProp#(NIL.conTag)#zero
setProp#(NIL.conAri)#zero
setProp#(NIL.conFun)#len
setProp#(NIL.conHas)#FALSE

!!=     'xyz abcd'
    ^ _ ~[{x} {y} {z } {abcd}]
    ? (strCatList lis)
    # datacase lis
    * NIL         | ''
    * (CONS x xs) | strWeld x (strCatList xs)


''' Either '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

idx0=(idx 0)

setProp#(LEFT.conTag)#zero
setProp#(LEFT.conAri)#one
setProp#(LEFT.conFun)#idx0
setProp#(LEFT.conHas)#TRUE

setProp#(RIGHT.conTag)#one
setProp#(RIGHT.conAri)#one
setProp#(RIGHT.conFun)#idx0
setProp#(RIGHT.conHas)#TRUE

= (showEither eat)
; trk [=eat]
# datacase eat
* (LEFT x)  ['left' x]
* (RIGHT x) ['right' x]

!!= [%left  %x] | showEither | LEFT  | {x}
!!= [%right %y] | showEither | RIGHT | {y}


""" Exports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

^-^ defKC defC ;; TODO Move this elsewhere
^-^
^-^ _DataTag
^-^ dataTag
^-^ '#datacase'
^-^ '#datatype'
^-^ '#record'
