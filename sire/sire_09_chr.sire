; Copyright 2023 The Plunder Authors
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

#### sire_09_chr <- sire_07_dat

;;;; Characters
;;;; ==========
;;;;
;;;; Operations on ASCII characters


;;; Imports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:| sire_01_fan [seq]
:| sire_02_bit [if ifNot and or not]
:| sire_03_nat [add sub div mod]
:| sire_04_cmp [eql gte lte lth]
:| sire_05_row []
:| sire_06_rex []
:| sire_07_dat [NIL CONS listToRow all {,}]


;;; Definitions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(isDigit c)=(and (gte c {0}) (lte c {9}))
(isUpper c)=(and (gte c {A}) (lte c {Z}))
(isLower c)=(and (gte c {a}) (lte c {z}))
(isAlpha c)=(or isUpper-c isLower-c)
(isPrint c)=(and (gte c { }) (lte c {~}))

= (isHexDigit c)
| or (isDigit c)
| or (and (gte c {A}) (lte c {F}))
     (and (gte c {a}) (lte c {f}))

(isAlphaNum c)=(or isAlpha-c isDigit-c)

(toLower c)=(if (isUpper c) (add 32 c) c)
(toUpper c)=(if (isLower c) (sub c 32) c)

(chr c)=(add c 48)
(ord c)=(sub c 48)

newlineChar=10
tabChar=9
spaceChar=32

;;; Utilities ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; {listDigits} converts a nat into a list of digits.
= (listDigits num)
| ifNot num (CONS {0} 0)
^ _ num NIL
? (loop mor acc)
| seq acc
| ifNot mor acc
@ char (add (mod mor 10) {0})
@ left (div mor 10)
| loop left (CONS char acc)

;; {digits} converts a nat into a row of digits.
= (digits num) (listToRow listDigits-num)

;;; Tests ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

=?= 1 | eql 1   (ord {1})
=?= 1 | eql {3} (chr 3)
=?= 1 | eql 5   (ord (chr 5))
=?= 1 | eql {9} (chr (ord {9}))

=?= 1 | isLower {c}
=?= 1 | isUpper {C}
=?= 1 | not (isAlpha {0})
=?= 1 | isDigit {0}
=?= 1 | not (isDigit {a})

=?= 1 | all isHexDigit [{0} {9} {a} {A} {f} {F}]
=?= 1 | not (isHexDigit {g})

=?= 1 (isPrint {a})
=?= 0 (isPrint 1)

=?= [{0} 0]                   | listDigits 0
=?= [{0}]                     | digits 0
=?= [{1} [{2} [{3} [{4} 0]]]] | listDigits 1234
=?= [{1} {2} {3} {4}]         | digits     1234
=?= [{1} [{2} [{3} [{4} 0]]]] | listDigits 01234
=?= [{1} {2} {3} {4}]         | digits     01234

;;; Exports ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

^-^
^-^ ord chr
^-^ isDigit isHexDigit
^-^ isUpper isLower isAlpha isPrint
^-^ isAlphaNum
^-^ toLower toUpper
^-^
^-^ newlineChar tabChar spaceChar
^-^
^-^ listDigits digits
^-^
