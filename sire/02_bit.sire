;;; Copyright 2023 The Plunder Authors
;;; Use of this source code is governed by a BSD-style license that can be
;;; found in the LICENSE file.

### 02_bit <- 01_fan

"""
""" Bits
""" ====
"""
""" These around foundational operations on bits/booleans.
"""
""" There's many different ways to implement these operations, optimizing
""" for different things.  What I've decided to optimize for here is
""" "jet weight".
"""
""" Jetting only `if` gets you pretty far.  With an `if` jet + inlining,
""" everything else is automatically implemented as a truth table.
"""
""" We could instead optimize for dependency depth, having most of these
""" be implemented directly in terms of `2`, but `2` is much more
""" cumbersome than `if`.
"""
""" We could inline everything besides `if`, which would make all of
""" these functions literally truth tables.  However, we instead optimize
""" for clarity of the PLAN code.
"""
""" The general principles are:
"""
""" -   Prefer fewer jets to shallow dependency trees.
""" -   Prefer code clarity to shallow dependency trees
"""
""" So in general, we are going for short/clear definitions that boil
""" down to a small set of core functions that benefit greatly from
""" jetting.
"""
"""
""" Jetting
""" -------
"""
""" All of the jets in this module are optional.
"""
""" If implementing a subset of these jets, then _If is the highest
""" leverage, followed by _Bit and _Not.
"""


""" Imports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

/+  01_fan  []


""" Definitions """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

TRUE=1
FALSE=0

= (_If x t e) | 2 e _&t x
= (_Not x)    | _If x 0 1
= (_Bit x)    | _If x 1 0
= (_And x y)  | _If x (_Bit y) 0
= (_Or x y)   | _If x 1 (_Bit y)
= (_Xor x y)  | _If x (_Not y) (_Bit y)
= (_Nand x y) | _Not (_And x y)
= (_Nor x y)  | _Not (_Or x y)
= (_Xnor x y) | _Not (_Xor x y)


""" Aliases and Syntax """""""""""""""""""""""""""""""""""""""""""""""""""""""""

= if   | _If
= not  | _Not
= bit  | _Bit
= and  | _And
= or   | _Or
= xor  | _Xor
= nand | _Nand
= nor  | _Nor
= xnor | _Xnor

= (**ifNot x t e) | if x e t
= (**else x)      | x

; Note that ifNot and else are marked as "always inline" and will not
; appear in the resulting PLAN code.  They exist only to make code
; look nicer.


""" Tests """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

!!= 1 | TRUE
!!= 1 | not FALSE
!!= 1 | not (not TRUE)

!!= 1 | if 1 1 0
!!= 1 | not (if 1 0 1)
!!= 1 | if 0 0 1
!!= 1 | not (if 0 1 0)

!!= 1 | if if 0 1
!!= 1 | not (if if 1 0)

!!= 0 | and 1 (x&x)


""" Exports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

^-^
^-^ TRUE FALSE
^-^
^-^ if ifNot else
^-^
^-^ bit not
^-^
^-^ and or xor nand nor xnor
^-^
