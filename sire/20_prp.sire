;;; Copyright 2023 The Plunder Authors
;;; Use of this source code is governed by a BSD-style license that can be
;;; found in the LICENSE file.

### 20_prp <- 19_pat

"""
""" Properties
""" ==========
"""
""" Lookup and set properties on syntax objects.
"""


""" Imports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

/+  01_fan
/+  02_bit
/+  03_nat
/+  04_app
/+  05_cmp
/+  06_row
/+  07_rex
/+  08_dat
/+  09_sci
/+  10_chr
/+  11_str
/+  12_cab
/+  13_tab
/+  14_exp
/+  15_hax
/+  16_pad
/+  17_bar
/+  18_sug
/+  19_pat


""" Operations on Property Tables """"""""""""""""""""""""""""""""""""""""""""""

= (hasProperty key pro tab)
| and (tabHas pro tab)
| tabHas key (tabIdx pro tab)

= (getProperty key pro tab)
| tabIdx key
| tabIdx pro
| tab

= (setProperty key pro val tab)
@ kid | tabIdx pro tab
@ kid | if isNat-kid #[] kid
@ kid | tabIns key val kid
| tabIns pro kid tab

!!= %val               | getProperty 37 %foo [foo=[37='val']]
!!= [foo=([37='val'])] | setProperty 37 %foo %val 0
!!= [foo=([37='val'])] | setProperty 37 %foo %val [foo=(#[])]

!!= #[foo=[130='v' 129='w'] bar=[130='v']]
  | setProperty 130 %foo %v
  | setProperty 130 %bar %v
  | setProperty 129 %foo %w
  | 0


""" Convenience Wrappers to use Rex nodes as keys """"""""""""""""""""""""""""""

(rexHasProp rex pro tab)=(hasProperty (rexIdnt rex) pro tab)
(rexGetProp rex pro tab)=(getProperty (rexIdnt rex) pro tab)
(rexSetProp rex pro val tab)=(setProperty (rexIdnt rex) pro val tab)


""" Convenience Macros to Query properties of bindings. """"""""""""""""""""""""

= ('#getKey' s p e a r err ok)
: _ symbol <- rexParseKids r [readRex readSymbol] err
| if not-(tabHas symbol s)
    | 'Undefined symbol' symbol
@ key (tabGet s symbol)
| if (isZero key)
    | 'Symbols defined without key' symbol
| ok p a (cnsE key)

= (readSymbProp rex err ret)
| if (neq '.' rexRune-rex)
  | err rex 'Expected a . rune'
: symbol property <- rexParseKids rex [readSymbol readSymbol] err
| ret [symbol property]

= ('#hasProp' s p e a r err expand)
: _ [symbol property] <- rexParseKids r [readRex readSymbProp] err
@ key (tabGet s symbol)
| if (isZero key)
  | die [symbol s]
  | err (varE symbol) 'Undefined symbol'
@ has (hasProperty key property p)
;
| expand p a (cnsE has)

= ('#getProp' s p e a r err expand)
: _ [symbol property] <- rexParseKids r [readRex readSymbProp] err
@ key (tabGet s symbol)
| if (isZero key)
  | die [symbol s]
  | err (varE symbol) 'Undefined symbol'
@ val (getProperty key property p)
;
| expand p a (cnsE val)


= ('#setProp' s p e a r err expand)
: _ [symbol property] valSym
        < rexParseKids r [readRex readSymbProp readSymbol] err
| if not-(tabHas symbol s)
        | err (varE symbol) 'Undefined symbol'
| if not-(tabHas valSym e)
        | err (varE valSym) 'Property value must be the name of a bound value.'
;
@ key (tabGet s symbol)
@ val (tabGet e valSym)
@ p (setProperty key property val p)
| expand p a (cnsE 0)

why=3
whySrc=(`(why=3))
setProp#(why.src)#whySrc
(1        !!= hasProp#(why.src))
(`(why=3) !!= getProp#(why.src))
why=4
(0 !!= hasProp#(why.src))
(0 !!= getProp#(why.src))


""" Exports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

^-^
^-^ hasProperty getProperty setProperty
^-^
^-^ {#getKey} {#hasProp} {#getProp} {#setProp}
^-^
^-^ rexHasProp rexGetProp rexSetProp
^-^
