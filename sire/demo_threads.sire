; Copyright 2023 The Plunder Authors
; Use of this source code is governed by a BSD-style license that can be
; found in the LICENSE file.

### demo_threads <- demo_telnet_hello_listen

/+  boot
/+  io      [forever]
/+  io      [syscall RAND_BYTE TIME_WHEN TIME_WAIT]
/+  io      [fork]
/+  io      [myThreadId getKernelState]
/+  io      [newRef readRef writeRef]
/+  io      [runCog]
/+  stew


""" Demo """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

;;; This will generate a random byte, get the current time,
;;; wait for $byte seconds, and repeat
;;;
> Ref Nat > IO ()
= (randomWait vCount k)
: tid <- myThreadId
: bar <- syscall (**RAND_BYTE 1)
: now <- syscall TIME_WHEN
@ off (mod (barIdx 0 bar) 5)
@ then (add now off)
: kd <- : cb <- fork
        : me <- myThreadId
        : _  <- syscall (**TIME_WAIT then)
        | trk [%kid_waited_also then [tid=me]]
        | cb 0
: x <- syscall (**TIME_WAIT then)
: n <- readRef vCount
: _ <- (@ x inc-n | seq x | writeRef vCount x)
: s <- getKernelState
| trk [%STATE s]
| trk [%waited_until then [tid=tid child=kd count=n]]
| k x

= threadDemoTwice
| runCog
& k
: v <- newRef 0
| (forever (randomWait v)) k


;; Manual Testing ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; threadDemoTwice %zod ;;; Boot Machine
; _ 1 x#11             ;;; Got a random byte.
; _ 1 234234234        ;;; Got the current time.
; _ 1 0                ;;; Finished waiting.
; _ 1 x#11             ;;; Got a random byte.
; _ 1 234234234        ;;; Got the current time.
; _ 1 0                ;;; Finished waiting.
; _ 2 0                ;;; First forked thread finishes waiting.
; _ 3 0                ;;; Second forked Thread finishes waiting.
; _ 1 x#11             ;;; Invalid response to trigger logging.


;; Export For Boot ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

main=threadDemoTwice
