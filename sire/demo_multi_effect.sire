;;; Copyright 2023 The Plunder Authors
;;; Use of this source code is governed by a BSD-style license that can be
;;; found in the LICENSE file.

### demo_multi_effect <- demo_multi_effect_html

/+  boot
/+  io
/+  stew
/+  demo_multi_effect_html [multi_demo_index_html]


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

= (forList_ list f next)
: x xs <- listCase list (next 0)
: _    <- f x
| forList_ xs f next

(forRow_ row f next)=(forList_ (listFromRow row) f next)
(forCab_ cab f next)=(**forRow_ (cabToRow cab) f next)
(traverseList_ f cab next)=(forList_ cab f next)
(traverseRow_ f cab next)=(**forRow_ cab f next)
(traverseCab_ f cab next)=(**forCab_ cab f next)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO Support `(# x)("""...)("""...)
= favicon
| PIN
| x#000001000100101010000100040028010000160000002800000010000000200000000100040000000000800000000000000000000000100000000000000000000000ff840000bfab9500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000010000000000000000000000000010011001000001000000010100200000000000000020100000000000000000000000010000000000000100100020010000001011002000100000010000020010000000000000000001110000000000000000000000000000000000000000000000f200000173000002b3c0000540c000063140000240000002c00000000160000000a000030c0000038a2000018d400001c0800000cf0000000000000

= files
@ html multi_demo_index_html
| PIN
## ="/index.html"  [ "text/html"    b#{Hello World!} ]
## ="/hello.txt"   [ "text/plain"   html             ]
## ="/"            [ "text/html"    html             ]
## ="/favicon.ico" [ "image/x-icon" favicon          ]

(RAND req)=[0 0 req]
(SERV req)=[0 1 req]

= TELNET_OPEN       | [0 2 0]
= (TELNET_KILL h)   | [0 2 [1 h]]
= (TELNET_WAIT h)   | [0 2 [2 h]]
= (TELNET_RECV h)   | [0 2 [3 h]]
= (TELNET_SEND h b) | [0 2 [4 h b]]

= WEBSOCKET_OPEN       | [0 3 0]
= (WEBSOCKET_KILL h)   | [0 3 [1 h]]
= (WEBSOCKET_WAIT h)   | [0 3 [2 h]]
= (WEBSOCKET_RECV h)   | [0 3 [3 h]]
= (WEBSOCKET_SEND h b) | [0 3 [4 h b]]

= (onHTTPExit conns table req val)
| die "HTTP Server request should not return"

= (guarenteeNewline bar)
| if barIsEmpty-bar bar
@ las (barGet bar (dec barLen-bar))
| if (eql 10 las) bar
| barWeld bar (natBar 10)

!! | eql (barWeld b#asdf (natBar 10))
   | guarenteeNewline (barWeld b#asdf (natBar 10))

!! | eql (barWeld b#asdf (natBar 10))
   | guarenteeNewline b#asdf

!! eql b#"" (guarenteeNewline b#"")

= (parseInput bar)
@ isSpace (i & or (eql " " i) (eql 10 i))
@ [command rest] (barSplitOneWith isSpace bar)
++ command
++ barDropWhile isSpace rest

!! | eql [b#broadcast b#{Hello World!}]
   | parseInput
   | b#{broadcast   Hello World!}

= (isServRequest req)
@ [ty hw] req
| and (eql 0 ty) (eql 1 hw)

(unregisterSocket vConn sock next)=(modifyRef vConn (cabDel sock) next)
(registerSocket vConn sock next)=(modifyRef vConn (cabIns sock) next)

(sockOpen class)=(idx 0 class)
(sockSend class)=(idx 1 class)
(sockRecv class)=(idx 2 class)
(sockWait class)=(idx 3 class)
(sockKill class)=(idx 4 class)

= Telnet
++ SOCK_OPEN
++ SOCK_SEND
++ SOCK_RECV
++ SOCK_WAIT
++ SOCK_KILL

= WebSocket
++ WOCK_OPEN
++ WOCK_SEND
++ WOCK_RECV
++ WOCK_WAIT
++ WOCK_KILL

= (handleSocketInput broadcast class vOpen sock next)
: stt <- getKernelState
: bar <- syscall (**sockRecv class sock)
| if (eql 0 bar) (next 0)
: tid <- fork (PIN-handleSocketInput broadcast class vOpen sock)
: con <- readRef vOpen
@ conns (listFromRow cabToRow-con)
| broadcast bar next

= (runLocalFileServer next)
: tid <- myThreadId
| trk %serv,[=tid]
: res <- syscall HTTP_SERV files
| die "Impossible: File Server does not respond"
| next res

= (sendAllLoop send conns bar next)
: c cs <- **listCase conns (next 0)
: _    <- fork (syscall (**send c bar))
| sendAllLoop send cs bar next

= (sendAll vTelnetOpen vWebSocketOpen bar next)
| trk ["ALL_SEND" bar]
: tels <- readRef vTelnetOpen
: webs <- readRef vWebSocketOpen
| trk ["ALL_SEND" bar [=tels =webs]]
: ____ <- sendAllLoop SOCK_SEND (cabToList tels) bar
: ____ <- sendAllLoop WOCK_SEND (cabToList webs) bar
| next 0

= (runSocketLoop broadcast class vOpen next)
@ recur (PIN runSocketLoop)
| trk %WAITING_FOR_SOCKET,(**sockOpen class)
: sock <- syscall (**sockOpen class)
| trk %NEW_SOCKET,sock
: _ <- registerSocket vOpen sock
| trk %registered,sock
: _ <- fork (handleSocketInput broadcast class vOpen sock)
| trk %readThread,_
: _ <- fork
        & done
        | trk %loopThread,_
        : _ <- syscall (**sockWait class sock)
        : _ <- syscall (**sockKill class sock)
        : _ <- unregisterSocket vOpen sock
        : s <- getKernelState
        | trk %socked_end,sock
        | done 0
| recur broadcast class vOpen next

;;;   ++ | tableAdd (TELNET_WAIT h) (onTelnetWait h)
;;;      | tableAdd (TELNET_RECV h) (onTelnetRecv h)
;;;      | tableAdd TELNET_OPEN PIN-onTelnetOpen
;;;      | table

;; Random Wait ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; This will generate a random byte, get the current time,
;;; wait for $byte seconds, and repeat
;;;
> Ref Nat > IO ()
= (randomWait vCount k)
: tid <- myThreadId
: bar <- syscall (RAND_BYTE 1)
: now <- syscall TIME_WHEN
@ off (mod (barIdx 0 bar) 5)
@ then (add now off)
: kd <- : cb <- fork
        : me <- myThreadId
        : _  <- syscall (TIME_WAIT then)
        | trk [%kid_waited_also then [tid=me]]
        | cb 0
: x <- syscall (TIME_WAIT then)
: n <- readRef vCount
: _ <- (@ x inc-n | seq x | writeRef vCount x)
: s <- getKernelState
| trk [%STATE s]
| trk [%waited_until then [tid=tid child=kd count=n]]
| k x


;; WebSocket Server ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; = (runWebSocket _next)
; : vOpen <- newRef %[]
; | forever
; & loop
; : sock <- webSocketOpen
; : ____ <- modifyRef vOpen (cabIns sock)
; : trak <- fork (trackWebSocketSocket vWebSocketConn sock)
; : hand <- fork (forever (handleWebSocketInput vWebSocketConn sock))
; | loop 0

= (randomWaitLoop vCount k)
@ recur PIN-randomWaitLoop
: _ <- randomWait vCount
| recur vCount k

= (effectDemo done)
: vCount          <- newRef 0
: vTelnetOpen     <- newRef %[]
: vWebSockOpen    <- newRef %[]
@ bc (sendAll vTelnetOpen vWebSockOpen)
: telnetThread    <- fork (runSocketLoop bc Telnet vTelnetOpen)
: webSocketThread <- fork (runSocketLoop bc WebSocket vWebSockOpen)
; waitThread      <- fork (randomWaitLoop vCount)
: st <- getKernelState
| runLocalFileServer done

= (repeatRequestDemo done)
: now <- syscall TIME_WHEN
; trk %now,now
| repeatRequestDemo done

(runCog effectDemo)
