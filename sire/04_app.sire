"""
""" Operations on Closures
""" ======================
"""
""" `get`, `idx`, and `len` are primarily intended to be used on vectors
""" (and their jets are optimized for that use-case).  However, they
""" work on any closure.
"""


""" Imports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

/+  01_fan  [isApp car seq inc cdr]
/+  02_bit  [if ifNot not]
/+  03_nat  [dec eqlNat isZero]


""" Definitions """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

(head non)=(if isApp-non (head car-non) non)

(null row)=(not isApp-row)

= (arity x)
@ p i&(arity i)
@ l (_ a _)&a
@ a (f _)&(dec arity-f)
@ n (2 3 (2 5 (2 3 _&1)))  ; 0->3, 1->5, 2->3, *->1
| 1 p l a n x

= (len v)
^ _ 0 v
? (go n v)
| seq n
| ifNot (isApp v) n
| go (inc n) (car v)

;;;
;;; {put} modifies the closure {r}, returning a new closure where
;;; the {k}th argument is replaced with {v}.
;;;
;;; Remember that the nth element of a closure is counted from the
;;; right.  For example, (put (f a x) 0 y) => (f a y)
;;;
= (put r k v)
| if (null r)   | r
| if (isZero k) | (car r) v
| put (car r) (dec k) v (cdr r)

= (get r i)
| if (null r) 0
| 2 cdr-r (get car-r) i

(idx k r)=(get r k)
(mut k v r)=(put r k v)


""" Tests """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

v0=(0 0 1 0)
(v1 x)=(0 0 2 0 x)
(v2 x y)=(0 0 3 0 y x)

!!= 1 | eqlNat 3 arity-0
!!= 1 | eqlNat 5 arity-1
!!= 1 | eqlNat 3 arity-2
!!= 1 | eqlNat 1 arity-3
!!= 1 | eqlNat 1 arity-4
!!= 1 | eqlNat 1 arity-5

!!= 1 | arity arity
!!= 1 | arity 3
!!= 1 | arity 4
!!= 1 | arity 0-1-2

!!= 1 | eqlNat 2 arity-(0 0)
!!= 1 | eqlNat 3 arity-0

!!= 1 | cdr (0 0 2 0 1)
!!= 1 | cdr (0 0 3 0 2 1)
!!= 1 | cdr car-(0 0 3 0 1 2)

!!= 1 | eqlNat 0 | len v0
!!= 1 | len (v1 0)
!!= 1 | eqlNat 1 | len (v1 0)

!!= 1 | eqlNat 2 | len (v2 0 0)
!!= 1 | eqlNat 0 | len 0
!!= 1 | eqlNat 1 | len (0 1)

!!= 1 | eqlNat 0 | idx 0 2
!!= 1 | eqlNat 3 | idx 0 (2 3)
!!= 1 | eqlNat 4 | idx 0 (2 3 4)
!!= 1 | eqlNat 3 | idx 1 (2 3 4)
!!= 1 | eqlNat 0 | idx 2 (2 3 4)

!!= 1 | eqlNat 0 | idx 0 1
!!= 1 | eqlNat 1 | idx 0 (1 0 1)
!!= 1 | eqlNat 0 | idx 1 (1 0 1)
!!= 1 | eqlNat 0 | idx 2 (1 0 1)

!!= 1 | eqlNat 0 | get 1 0
!!= 1 | eqlNat 1 | get (1 0 1) 0
!!= 1 | eqlNat 0 | get (1 0 1) 1
!!= 1 | eqlNat 0 | get (1 0 1) 2

!!= 1 | null-get
!!= 1 | null-0
!!= 1 | not null-(0 'x')


""" Exports """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

^-^ head null arity len
^-^ idx get
^-^ mut put
