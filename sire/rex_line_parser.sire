### rex_line_parser <- parse

;;; TODO: #datacase should accept any three kids, the cases shouldn't
;;; be required to be an heir.

/+  prelude
/+  datatype
/+  types
/+  stew
/+  parse


;;; Types ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

# datatype Frag
* RUNE=RUNE x:Str
* FORM=FORM x:Form
* LSTR=LSTR x:Bit y:Str

# datatype Form
* BEFO=BEFO x:Str y:Form        ;;  +()()
* SHIN=SHIN x:Str y:(Row Itmz)  ;;  ()()+()()
* SHIP=SHIP x:Itmz              ;;  ()()

# datatype Item
* ILEAF=ILEAF x:Leaf
* INEST=INEST x:Nest

# typedef Itmz (Item, List Item) ; never empty

# datatype Nest
* INFIX=INFIX x:Str y:(Row | Row Form)
* PREFX=PREFX x:Str y:(Row Form)
* WRAPD=WRAPD x:Form
* PAREN=PAREN x:(Row Form)

# datatype CordType
* THICK=THICK
* LIGHT=LIGHT
* CURLY=CURLY

;; TODO: Using the same name twice in #datatype results in invalid code.
;; Validate the input to make sure this is not possible.

# datatype Leaf
* LNAME=LNAME x:Str
* LTEXT=LTEXT x:CordType y:Str


;; Common Constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; These are just ugly literals

lus=(b#"+")
bar=(b#"|")
com=(b#",")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

> Nat > Bit ;; TODO s/Nat/Char/
= (isRuneChar c)
| barHas c b#{$!#%&*+,-./:<=>?@\\^`|~}

> Nat > Bit
(isNameChar c)=((c == '_') || isAlphaNum c)

> Parser r Bar
rune=(**stringOf1 isRuneChar)

> Parser r Bar
name=(**stringOf1 isNameChar)

> Nat > Parser r Bar
= (cord quo)
| andThen (char quo)
| andThenLeft (stringOf (neq quo))
| char quo

;; TODO: support {{nesting}}
;; TODO: support \}escaping
> Parser r Bar
= curl
| andThen (char '{')
| andThenLeft (stringOf | neq '}') (char '}')

> Parser r (CordType, Bar)
= leaf
| choice (pmap x&(LTEXT THICK x) | cord {"})
| choice (pmap x&(LTEXT LIGHT x) | cord {'})
| choice (pmap x&(LTEXT CURLY x) | curl)
         (pmap x&(LNAME x)      | name)

spc=(char ' ')
spc0=(many spc)
whyt=(some spc)

= (parserDebug ctx x buf off err fail ok)
| trk 'parserDebug',ctx,(barTake 10 | barDrop off buf)
; trk 'parserDebug',ctx,[=buf =off]
; trk 'parserDebug',ctx,[=err =fail =ok]
| x buf off err fail ok

empt=(parserMap (const NIL) (char ']'))

= (carl form buf off err fail ok)
^ (_ buf off err fail ok)
| pcons form
| choice empt
| andThen whyt
| choice empt (carl form)

> Parser r Nest
= (brak form)
| andThen (char '[')
| andThen spc0
: items <- bind (choice empt (carl form))
| parserPure (PREFX com | listToRow items)

> Str > (Str, List Str) > Parser r ()
= (assertUnambiguous whichForm runes@[r rs])
@ conflicts | listFilter (neq r) rs
@ notAllow  ^ (b#{.}, barNewline, _)
            | b#{This implementation doesn't allow ambiguous infix forms}
@ reason    | (natBar whichForm, b#{-form mixes runes: })
# datacase conflicts
* NIL (parserPure ())
* (CONS _ _)
^ parserFail (barFlat [reason _ notAllow])
| barIntercalateList b#{, }
^ trk [hi=_] _
| listMap x&(barCat [b#{'} natBar-x b#{'}])
| listNub r::conflicts

!!= OKAY-()
  | runParser (assertUnambiguous "Shut" ("+", ~["+" "+"])) b#{}

!!=   | FAIL
      # b """Shut-form mixes runes: '+', '*'.
          """This implementation doesn't allow ambiguous infix forms
  | runParser (assertUnambiguous "Shut" ("+", ~["+" "*"])) b#{}

; This is the same as `frag` but does not accept pages.
= (frog form)
^ choice _ (parserMap RIGHT form)
^ parserMap2 _ rune (optional form)
& (r of)
| (datacase#of)(NONE * LEFT r)(SOME x * RIGHT (BEFO r x))


; expect to see the end of a parenthesis nesting (either prefix or infix),
; and return an empty list.
= term
| parserDebug "term"
| parserMap (const NIL) (char ')')

; Body of parenthesis in prefix mode, after initial (rune+space)
> Bar > Parser r Nest
= (pree form initialRune)
;
@ (frogs form)
    | pcons (frog form)
    | choice term
    | andThen whyt (choice term (frogs form))
;
@ (unravel roon ns fs)
    # datacase fs
    * NIL
        | PREFX roon (listToRowReversed ns)
    * (CONS i is)
        # datacase i
        * (RIGHT w) | unravel roon (w::ns) is
        * (LEFT r)  ^ PREFX roon (listToRowReversed _::ns)
                    ^ SHIP ,(INEST _)
                    | unravel r NIL is
: fs <- bind (choice term (frogs form))
| parserPure (unravel initialRune NIL fs)

> Str > List Form > List (Either Str Form) > List (Str, List Form)
= (plixRavel r ws es)
# datacase es
* NIL
    ~[(r, listRev ws)]
* (CONS i is)
    # datacase i
    * (LEFT s)  | (r, listRev ws)::(plixRavel s NIL is)
    * (RIGHT w) | plixRavel r (w::ws) is

> List Form > List (Either Str Form) > (List Form, List (Str, List Form))
= (plixUnravel ws es)
# datacase es
* NIL       | (listRev ws, NIL)
* (CONS i is)
# datacase i
* (LEFT r)  | (listRev ws, plixRavel r NIL is)
* (RIGHT w) | plixUnravel (w::ws) is

; In nest-infix, read an infix rune, a space, and an item.
= (mixy faro)
| parserDebug "mixy"
: ryn <- bind (try | andThenLeft rune whyt)
: mor <- bind faro
| parserPure (LEFT ryn :: mor)

; In nest-infix, right after some form, read one of:
;
; - the end of nesting
; - infix rune
; - whitespace followed by:
;   - the end of nesting
;   - an infix rune
;   - a form
= (fart faro i)
| trk ("fart", [=faro], [=i])
| parserDebug "fart",[=i]
| parserMap (CONS i)
| choices
~~ term
~~ mixy faro
~~ andThen whyt | choices ~[term (mixy faro) faro]

; In nest-infix, expect a form and then get more items.
= (faro form buf off err fail ok)
^ (_ buf off err fail ok)
| parserDebug "faro"
: i <- bind (parserMap RIGHT form)
| trk 'faro got',[=i]
| fart (faro form) i

> Parser r Form > Form > Parser r Nest
= (plix form initialForm)
| parserDebug "plix"
;
: items <- bind (fart (faro form) (RIGHT initialForm))
| trk [=items]
# datacase items
* NIL | die "plix: impossible (never empty, has hard-coded initial val)"
* (CONS i moreItems)
# datacase i
* (LEFT _) | die "plix: impossible (initial value is hard-coded as RIGHT)"
* (RIGHT i)
# datacase moreItems
* NIL (parserPure | WRAPD i)
* (CONS _ _)
@ (fs, xs) (plixUnravel NIL items)
# datacase xs
* NIL
    | parserPure (PAREN | listToRow fs)
* (CONS [ryn gs] more)
    | andThen
    * assertUnambiguous "Nest" (ryn, listMap fst more)
    * parserPure | INFIX ryn
                 | listToRow
                 | listMap (compose listToRow snd)
                 | [ryn fs]::xs

> Parser r Nest
= (para form)
| andThen (char '(')
| andThen spc0
| choices
~~ parserMap const-(PREFX bar []) (char ')')
~~ | parserDebug 'just rune'
   : ryn <- bind (try (andThenLeft rune (char ')')))
   | parserPure (PREFX ryn [])
~~ | parserDebug 'nest-prefix'
   | bind (try | andThenLeft rune whyt) (pree form)
~~ bind form (plix form)

(nest form)=(choice (brak form) (para form))

> Parser r Item
= (item form)
| choice
* parserMap INEST (nest form)
* parserMap ILEAF leaf

(itmz form)=(parserMap listToRow (some | item form))

= (shin form)
: i  <- bind (itmz form)
: is <- bind | many | try | parserMap2 v2 rune (itmz form)
# datacase is
* NIL
    | parserPure (SHIP i)
* (CONS [r j] ps)
    | andThen
    * assertUnambiguous "Shut" (r, listMap fst ps)
    * parserPure | SHIN r | listToRow (i :: j :: listMap snd ps)

> Parser r Form
= (form buf off err fail ok)
^ (_ buf off err fail ok)
| choice
* parserMap LEFT  (brak form)
* parserMap RIGHT leaf

> Parser r Form
= (form buf off err fail ok)
^ (_ buf off err fail ok)
| choice
* parserMap2 BEFO rune (shin form)
* shin form

> Parser r (Bit, Str)
= page
: thic <- bind | choice
               * parserMap (const TRUE)  (string b#{"""})
               * parserMap (const FALSE) (string b#{'''})
: rest <- bind parserTakeRest
| parserPure (thic, rest)

> Parser r (Nat, Frag)
= (frag buf off err fail ok)
^ (_ buf off err fail ok)
@ (rinse r s)
    # datacase s
    * NONE     | RUNE r
    * (SOME x) | FORM (BEFO r x)
: d <- bind parserGetLineOffset
: x <- ^ bind (choices _) ; (parserMap2 rinse rune (optional | shin form))
      ~~ parserMap (uncurry LSTR) page
      ~~ parserMap2 rinse rune (optional | shin form)
      ~~ parserMap FORM form
@ o (datacase#x)(FORM _ * 0)(LSTR _ _ * 2)(RUNE r * dec barLen-r)
| parserPure (add o d, x)

= nada
| choice
* parserMap (const NIL) | andThen char-{;} parserTakeRest
* parserMap (const NIL) | eof

= (loan buf off err fail ok)
^ (_ buf off err fail ok)
| choice nada
| andThen whyt
| choice nada
| pcons frag loan

> Parser r (Row (Nat, Frag))
= line
: lis <- bind | andThen spc0
              | choice nada (pcons frag loan)
| parserPure (listToRow lis)

= (main bar)
: result <- runParser line bar
| trk [=result]
| 'exit' 0


;; Tests ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

!!= (OKAY (LTEXT THICK b#foo)) | runParser leaf b#{"foo"}
!!= (OKAY (LTEXT LIGHT b#foo)) | runParser leaf b#{'foo'}
!!= (OKAY (LTEXT CURLY b#foo)) | runParser leaf b#{{foo}}
!!= (OKAY (LNAME b#foo))       | runParser leaf b#{foo}
!!= (FAIL b#more)              | runParser leaf b#{'foo}

!!=   | OKAY (SHIP [ILEAF-(LTEXT THICK b#foo)])
  | runParser form b#{"foo"}

!!=   | OKAY (SHIP [(INEST | PREFX com [])])
  | runParser form b#{[]}

!!=   ^ OKAY (SHIP [_])
      ^ INEST (PREFX com _)
     ++ SHIP [(ILEAF (LNAME b#foo))]
     ++ SHIP [(ILEAF (LNAME b#bar))]
  | runParser form b#{[foo bar]}

!!=   ^ OKAY (SHIP ,_)
      ^ INEST (PREFX com _)
     ++ SHIP ,(INEST | PREFX com ,(SHIP ,(ILEAF (LNAME b#foo))))
     ++ SHIP ,(ILEAF (LNAME b#bar))
  | runParser form b#{[[foo] bar]}

!!= OKAY-(b#{%%})          | runParser rune b#{%%}
!!= OKAY-(0, RUNE b#{%})   | runParser frag b#{%}
!!= OKAY-(1, RUNE b#{%%})  | runParser frag b#{%%}
!!= OKAY-(2, RUNE b#{%%%}) | runParser frag b#{%%%}

!!=   | OKAY
     ++ ^ (0,_) | FORM | SHIP ,(INEST (PREFX com []))
     ++ ^ (4,_) | RUNE | b#{$$}
     ++ ^ (6,_) | FORM | SHIP ,(INEST (PREFX com ,(SHIP ,(ILEAF LNAME-(b#x)))))
  | runParser line b#{[] $$ [x]}

!!= OKAY-[(4, LSTR 1 b#{ xyz })] | runParser line b#{  """ xyz }
!!= OKAY-[(4, LSTR 1 b#{xyz})]   | runParser line b#{  """xyz}
!!= OKAY-[(2, LSTR 1 b#{xyz})]   | runParser line b#{"""xyz}

!!= OKAY-[(0, FORM (SHIP ,(INEST (PREFX bar []))))]
  | runParser line b#{()}

!!= OKAY-[(0, FORM (SHIP ,(INEST (PREFX lus []))))]
  | runParser line b#{(+)}

!!=   ^ OKAY-[(0, FORM (SHIP ,(INEST (PREFX lus _))))]
     ++ SHIP ,(ILEAF | LNAME b#3)
     ++ SHIP ,(ILEAF | LNAME b#4)
  | runParser line b#{(+ 3 4)}

!!=   ^ OKAY-[(0, FORM (SHIP ,(INEST (PREFX lus _))))]
     ++ SHIP ,(ILEAF | LNAME b#3)
     ++ SHIP ,(INEST | PREFX lus [])
  | runParser line b#{(+ 3 +)}

!!=   ^ OKAY [(2, _)]
      ^ FORM (SHIP [_])
      ^ INEST | PREFX lus ,(SHIP [_])
      ^ INEST | PREFX lus ,(SHIP [_])
      ^ INEST | PREFX lus ,(SHIP [_])
      | ILEAF | LNAME b#3
  | runParser line b#{  (+ + + 3)  }

!!=   ^ OKAY [(2, FORM _)]
      ^ SHIP ,(INEST (WRAPD _))
      | SHIP ,(ILEAF | LNAME b#3)
  | runParser line b#{  (3)  }

!!=   ^ OKAY [(2, FORM _)]
      ^ SHIP ,(INEST (WRAPD _))
      | SHIP ,(ILEAF | LNAME b#3)
  | runParser line b#{  ( 3 )  }

!!=   ^ OKAY [(2, FORM _)]
      ^ SHIP ,(INEST (PAREN _))
     ++ SHIP ,(ILEAF | LNAME b#3)
     ++ SHIP ,(ILEAF | LNAME b#4)
     ++ SHIP ,(ILEAF | LNAME b#5)
  | runParser line b#{  (3 4 5)  }

!!=   ^ OKAY [(2, FORM _)]
      ^ SHIP ,(INEST | INFIX com _)
     ++ ,(SHIP ,(ILEAF | LNAME b#3))
     ++ ,(SHIP ,(ILEAF | LNAME b#4))
  | runParser line b#{  (3 , 4)  }

!!=   ^ OKAY [(2, FORM _)]
      ^ SHIP ,(INEST | WRAPD (SHIN com _))
     ++ ,(ILEAF | LNAME b#3)
     ++ ,(ILEAF | LNAME b#4)
  | runParser line b#{  (3,4)  }

!!=   ^ OKAY [(2, FORM _)]
      ^ SHIP ,(INEST | INFIX com _)
     ++ ,(SHIN com [,(ILEAF | LNAME b#3) ,(ILEAF | LNAME b#4)])
     ++ ,(SHIN com [,(ILEAF | LNAME b#5) ,(ILEAF | LNAME b#6)])
  | runParser line b#{  (3,4, 5,6)  }
